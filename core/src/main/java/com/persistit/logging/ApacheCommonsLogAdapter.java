/**
 * Copyright (C) 2011 Akiban Technologies Inc.
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses.
 */

package com.persistit.logging;

import org.apache.commons.logging.Log;

/**
 * Wraps an <code>org.apache.commons.logging.Log</code> for Persistit logging.
 * Code to enable default logging through Apache commons logging is shown here:
 * <code><pre>
 *    // refer to any appropriate org.apache.commons.logging.Log, for example
 *    Log log = LogFactory.getLog(getClass());
 *    Persistit.setPersistitLogger(new ApacheCommonsAdapter(logger));
 * </pre></code>
 * 
 * @version 1.1
 */
public class ApacheCommonsLogAdapter extends AbstractPersistitLogger {
    /**
     * The Log object wrapped by this adapter.
     */
    private Log _log;

    /**
     * Wraps an Apache commons <code>Log</code> so that Persistit can write to
     * it.
     * 
     * @param log
     *            A <code>Log</code> to which Persistit log messages will be
     *            directed.
     */
    public ApacheCommonsLogAdapter(Log log) {
        _log = log;
    }

    /**
     * Overrides <code>isLoggable</code> it allow control by the wrapped
     * <code>Log</code>.
     * 
     * @param lt
     *            The <code>LogTemplate</code>
     */
    @Override
    public boolean isLoggable(LogTemplate lt) {
        int level = lt.getLevel();
        switch (level) {
        case AbstractPersistitLogger.FINEST:
            return _log.isTraceEnabled();

        case AbstractPersistitLogger.FINER:
            return _log.isTraceEnabled();

        case AbstractPersistitLogger.FINE:
            return _log.isDebugEnabled();

        case AbstractPersistitLogger.INFO:
            return _log.isInfoEnabled();

        case AbstractPersistitLogger.WARNING:
            return _log.isWarnEnabled();

        case AbstractPersistitLogger.SEVERE:
            return _log.isErrorEnabled();

        case AbstractPersistitLogger.ALWAYS:
            return _log.isFatalEnabled();

        default:
            return true;
        }
    }

    /**
     * Writes a log message generated by Persistit to the wrapped
     * <code>Log</code>.
     * 
     * @param lt
     *            The <code>LogTemplate</code>
     * @param message
     *            The message to write to the log.
     */
    @Override
    public void log(LogTemplate lt, String message) {
        int level = lt.getLevel();
        switch (level) {
        case AbstractPersistitLogger.FINEST:
            _log.trace(message);
            break;

        case AbstractPersistitLogger.FINER:
            _log.trace(message);
            break;

        case AbstractPersistitLogger.FINE:
            _log.debug(message);
            break;

        case AbstractPersistitLogger.INFO:
            _log.info(message);
            break;

        case AbstractPersistitLogger.WARNING:
            _log.warn(message);
            break;

        case AbstractPersistitLogger.SEVERE:
            _log.error(message);
            break;

        case AbstractPersistitLogger.ALWAYS:
            _log.fatal(message);
            break;

        default:
            _log.fatal(message);
            break;
        }
    }

}
