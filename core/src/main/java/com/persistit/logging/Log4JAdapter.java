/**
 * END USER LICENSE AGREEMENT (“EULA”)
 *
 * READ THIS AGREEMENT CAREFULLY (date: 9/13/2011):
 * http://www.akiban.com/licensing/20110913
 *
 * BY INSTALLING OR USING ALL OR ANY PORTION OF THE SOFTWARE, YOU ARE ACCEPTING
 * ALL OF THE TERMS AND CONDITIONS OF THIS AGREEMENT. YOU AGREE THAT THIS
 * AGREEMENT IS ENFORCEABLE LIKE ANY WRITTEN AGREEMENT SIGNED BY YOU.
 *
 * IF YOU HAVE PAID A LICENSE FEE FOR USE OF THE SOFTWARE AND DO NOT AGREE TO
 * THESE TERMS, YOU MAY RETURN THE SOFTWARE FOR A FULL REFUND PROVIDED YOU (A) DO
 * NOT USE THE SOFTWARE AND (B) RETURN THE SOFTWARE WITHIN THIRTY (30) DAYS OF
 * YOUR INITIAL PURCHASE.
 *
 * IF YOU WISH TO USE THE SOFTWARE AS AN EMPLOYEE, CONTRACTOR, OR AGENT OF A
 * CORPORATION, PARTNERSHIP OR SIMILAR ENTITY, THEN YOU MUST BE AUTHORIZED TO SIGN
 * FOR AND BIND THE ENTITY IN ORDER TO ACCEPT THE TERMS OF THIS AGREEMENT. THE
 * LICENSES GRANTED UNDER THIS AGREEMENT ARE EXPRESSLY CONDITIONED UPON ACCEPTANCE
 * BY SUCH AUTHORIZED PERSONNEL.
 *
 * IF YOU HAVE ENTERED INTO A SEPARATE WRITTEN LICENSE AGREEMENT WITH AKIBAN FOR
 * USE OF THE SOFTWARE, THE TERMS AND CONDITIONS OF SUCH OTHER AGREEMENT SHALL
 * PREVAIL OVER ANY CONFLICTING TERMS OR CONDITIONS IN THIS AGREEMENT.
 */

package com.persistit.logging;

import java.util.EnumMap;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/**
 * Wraps a Log4J <code>org.apache.log4j.Logger</code> for Persistit logging.
 * Code to enable default logging through Log4J is shown here: <code><pre>
 *    // refer to any appropriate org.apache.log4j.Logger, for example
 *    Logger logger = Logger.getLogger("com.persistit"); //(for example)
 *    Persistit.setPersistitLogger(new Log4JAdapter(logger));
 * </pre></code>
 * 
 * @version 1.1
 */
public class Log4JAdapter implements PersistitLogger {

    private final static EnumMap<PersistitLevel, Level> LEVEL_MAP = new EnumMap<PersistitLevel, Level>(
            PersistitLevel.class);

    static {
        LEVEL_MAP.put(PersistitLevel.NONE, Level.OFF);
        LEVEL_MAP.put(PersistitLevel.TRACE, Level.TRACE);
        LEVEL_MAP.put(PersistitLevel.DEBUG, Level.DEBUG);
        LEVEL_MAP.put(PersistitLevel.INFO, Level.INFO);
        LEVEL_MAP.put(PersistitLevel.WARNING, Level.WARN);
        LEVEL_MAP.put(PersistitLevel.ERROR, Level.ERROR);
    }

    private Logger _logger;

    /**
     * Constructs a wrapped Log4J Logger.
     * 
     * @param logger
     *            A <code>Logger</code> to which Persistit log messages will be
     *            directed.
     */
    public Log4JAdapter(Logger logger) {
        _logger = logger;
    }

    /**
     * Overrides <code>isLoggable</code> to allow control by the wrapped
     * <code>Logger</code>.
     * 
     * @param level
     *            The <code>PersistitLevel</code>
     */
    @Override
    public boolean isLoggable(PersistitLevel level) {
        return _logger.isEnabledFor(LEVEL_MAP.get(level));
    }

    /**
     * Writes a log message generated by Persistit to the wrapped
     * <code>Logger</code>.
     * 
     * @param level
     *            The <code>PersistitLevel</code>
     * @param message
     *            The message to write to the log.
     */
    @Override
    public void log(PersistitLevel level, String message) {
        _logger.log(LEVEL_MAP.get(level), message);
    }

    @Override
    public void open() {
        // Nothing to do - the log is created and destroyed by the embedding
        // application
    }

    @Override
    public void close() {
        // Nothing to do - the log is created and destroyed by the embedding
        // application
    }
    

    @Override
    public void flush() {
        // Nothing to do - log output is managed by the embedding
        // application
    }
}
