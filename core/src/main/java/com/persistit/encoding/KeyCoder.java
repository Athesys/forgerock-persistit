/*
 * Copyright (c) 2004 Persistit Corporation. All Rights Reserved.
 *
 * The Java source code is the confidential and proprietary information
 * of Persistit Corporation ("Confidential Information"). You shall
 * not disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Persistit Corporation.
 *
 * PERSISTIT CORPORATION MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE
 * SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 * A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. PERSISTIT CORPORATION SHALL
 * NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 * 
 * Created on Jun 8, 2004
 */
package com.persistit.encoding;

import com.persistit.Key;
import com.persistit.exception.ConversionException;

/**
 * <p>
 * Interface for specialized encoding and decoding of an <tt>Object</tt> of
 * arbitrary type to or from a {@link Key}. Persistit contains built-in logic to
 * encode Objects of certain classes. By implementing and registering a
 * <tt>KeyCoder</tt> with the current {@link CoderManager} you can override the
 * default encoding or add encoding for classes that otherwise are not able to
 * be included in Persistit key values.
 * </p>
 * <p>
 * A <tt>KeyCoder</tt> implements methods to convert an object of some class to
 * an array of bytes and back again. The byte array is used to identify (or
 * partially identify) a record in a Persistit <tt>Tree</tt>. A typical
 * <tt>KeyCoder</tt> simply appends identifying fields of the object.
 * </p>
 * 
 * 
 * @version 1.0
 */
public interface KeyCoder {
    /**
     * <p>
     * Append a key segment derived from an object to a {@link Key}. This method
     * will be called only if this <tt>KeyCoder</tt> has been registered with
     * the current {@link CoderManager} to encode objects having the class of
     * the supplied object.
     * </p>
     * <p>
     * Upon completion of this method, the backing byte array of the
     * <tt>Key</tt> and its size should be updated to reflect the appended key
     * segment. Use the methods {@link Key#getEncodedBytes},
     * {@link Key#getEncodedSize} and {@link Key#setEncodedSize} to manipulate
     * the byte array directly. More commonly, the implementation of this method
     * will simply append appropriate identifying fields within the object to
     * the key.
     * </p>
     * <p>
     * This method is not responsible for encoding the class of the object being
     * appended. The caller encodes the identity of the class. This method
     * merely needs to encode the state of the object.
     * </p>
     * 
     * @param key
     *            The {@link Key} to append to
     * @param object
     *            The object to encode
     * @param context
     *            An arbitrary object that can optionally be supplied by the
     *            application to convey an application-specific context for the
     *            operation. (See {@link CoderContext}.) The default value is
     *            <tt>null</tt>.
     */
    public void appendKeySegment(Key key, Object object, CoderContext context)
            throws ConversionException;

    /**
     * <p>
     * Decode a key segment as an Object value. This method is invoked when
     * {@link Key#decode(Object)} attempts to decode a key segment that was
     * previously append by the {@link #appendKeySegment} method. Thus the
     * implementation of this method must precisely decode the same bytes that
     * were generated by the companion <tt>appendKeySegment</tt> method of this
     * <tt>ValueCoder</tt>.
     * </p>
     * <p>
     * This method will be called only if this <tt>KeyCoder</tt> is registered
     * with the current {@link CoderManager} to encode and decode objects of the
     * class that is actually represented in the <tt>Key</tt>. The class with
     * which the key was encoded is provided as an argument. This permits one
     * <tt>KeyCoder</tt> to handle multiple classes because the implementation
     * can dispatch to code appropriate for the particular supplied class. The
     * implementation should construct and return an Object having the same
     * class as the supplied class.
     * </p>
     * 
     * @param key
     *            The {@link Key} from which data should be decoded
     * @param clazz
     *            The expected <tt>Class</tt> of the returned object
     * @param context
     *            An arbitrary object that can optionally be supplied by the
     *            application to convey an application-specific context for the
     *            operation. (See {@link CoderContext}.) The default value is
     *            <tt>null</tt>.
     * @throws ConversionException
     */

    public Object decodeKeySegment(Key key, Class clazz, CoderContext context)
            throws ConversionException;
}
