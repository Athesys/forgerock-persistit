/**
 * END USER LICENSE AGREEMENT (“EULA”)
 *
 * READ THIS AGREEMENT CAREFULLY (date: 9/13/2011):
 * http://www.akiban.com/licensing/20110913
 *
 * BY INSTALLING OR USING ALL OR ANY PORTION OF THE SOFTWARE, YOU ARE ACCEPTING
 * ALL OF THE TERMS AND CONDITIONS OF THIS AGREEMENT. YOU AGREE THAT THIS
 * AGREEMENT IS ENFORCEABLE LIKE ANY WRITTEN AGREEMENT SIGNED BY YOU.
 *
 * IF YOU HAVE PAID A LICENSE FEE FOR USE OF THE SOFTWARE AND DO NOT AGREE TO
 * THESE TERMS, YOU MAY RETURN THE SOFTWARE FOR A FULL REFUND PROVIDED YOU (A) DO
 * NOT USE THE SOFTWARE AND (B) RETURN THE SOFTWARE WITHIN THIRTY (30) DAYS OF
 * YOUR INITIAL PURCHASE.
 *
 * IF YOU WISH TO USE THE SOFTWARE AS AN EMPLOYEE, CONTRACTOR, OR AGENT OF A
 * CORPORATION, PARTNERSHIP OR SIMILAR ENTITY, THEN YOU MUST BE AUTHORIZED TO SIGN
 * FOR AND BIND THE ENTITY IN ORDER TO ACCEPT THE TERMS OF THIS AGREEMENT. THE
 * LICENSES GRANTED UNDER THIS AGREEMENT ARE EXPRESSLY CONDITIONED UPON ACCEPTANCE
 * BY SUCH AUTHORIZED PERSONNEL.
 *
 * IF YOU HAVE ENTERED INTO A SEPARATE WRITTEN LICENSE AGREEMENT WITH AKIBAN FOR
 * USE OF THE SOFTWARE, THE TERMS AND CONDITIONS OF SUCH OTHER AGREEMENT SHALL
 * PREVAIL OVER ANY CONFLICTING TERMS OR CONDITIONS IN THIS AGREEMENT.
 */

package com.persistit.encoding;

import com.persistit.Key;
import com.persistit.exception.ConversionException;

/**
 * <p>
 * Interface for specialized encoding and decoding of an <code>Object</code> of
 * arbitrary type to or from a {@link Key}. Persistit contains built-in logic to
 * encode Objects of certain classes. By implementing and registering a
 * <code>KeyCoder</code> with the current {@link CoderManager} you can override
 * the default encoding or add encoding for classes that otherwise are not able
 * to be included in Persistit key values.
 * </p>
 * <p>
 * A <code>KeyCoder</code> implements methods to convert an object of some class
 * to an array of bytes and back again. The byte array is used to identify (or
 * partially identify) a record in a Persistit <code>Tree</code>. A typical
 * <code>KeyCoder</code> simply appends identifying fields of the object.
 * </p>
 * 
 * 
 * @version 1.0
 */
public interface KeyCoder {
    /**
     * <p>
     * Append a key segment derived from an object to a {@link Key}. This method
     * will be called only if this <code>KeyCoder</code> has been registered
     * with the current {@link CoderManager} to encode objects having the class
     * of the supplied object.
     * </p>
     * <p>
     * Upon completion of this method, the backing byte array of the
     * <code>Key</code> and its size should be updated to reflect the appended
     * key segment. Use the methods {@link Key#getEncodedBytes},
     * {@link Key#getEncodedSize} and {@link Key#setEncodedSize} to manipulate
     * the byte array directly. More commonly, the implementation of this method
     * will simply append appropriate identifying fields within the object to
     * the key.
     * </p>
     * <p>
     * This method is not responsible for encoding the class of the object being
     * appended. The caller encodes the identity of the class. This method
     * merely needs to encode the state of the object.
     * </p>
     * 
     * @param key
     *            The {@link Key} to append to
     * @param object
     *            The object to encode
     * @param context
     *            An arbitrary object that can optionally be supplied by the
     *            application to convey an application-specific context for the
     *            operation. (See {@link CoderContext}.) The default value is
     *            <code>null</code>.
     */
    public void appendKeySegment(Key key, Object object, CoderContext context) throws ConversionException;

    /**
     * <p>
     * Decode a key segment as an Object value. This method is invoked when
     * {@link Key#decode(Object)} attempts to decode a key segment that was
     * previously append by the {@link #appendKeySegment} method. Thus the
     * implementation of this method must precisely decode the same bytes that
     * were generated by the companion <code>appendKeySegment</code> method of
     * this <code>ValueCoder</code>.
     * </p>
     * <p>
     * This method will be called only if this <code>KeyCoder</code> is
     * registered with the current {@link CoderManager} to encode and decode
     * objects of the class that is actually represented in the <code>Key</code>
     * . The class with which the key was encoded is provided as an argument.
     * This permits one <code>KeyCoder</code> to handle multiple classes because
     * the implementation can dispatch to code appropriate for the particular
     * supplied class. The implementation should construct and return an Object
     * having the same class as the supplied class.
     * </p>
     * 
     * @param key
     *            The {@link Key} from which data should be decoded
     * @param clazz
     *            The expected <code>Class</code> of the returned object
     * @param context
     *            An arbitrary object that can optionally be supplied by the
     *            application to convey an application-specific context for the
     *            operation. (See {@link CoderContext}.) The default value is
     *            <code>null</code>.
     * @throws ConversionException
     */

    public Object decodeKeySegment(Key key, Class<?> clazz, CoderContext context) throws ConversionException;
}
