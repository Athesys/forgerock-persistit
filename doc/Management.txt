[[Management]]
= Management

Akiban Persistit provides three main avenues for measuring and managing its internal resources: an RMI interface, a JMX interface. and a command-line interface (CLI) through which you can issue various commands. 

The RMI interface is primarily intended for the com.persistit.ui.AdminUI utility. AdminUI is a Java JFC Swing program that runs on a device with graphical UI capabilities. For example, in Linux and Unix it requires an XServer. Since production servers are often headless it is often necessary to run AdminUI remotely, via its RMI interface. To do this, the Persistit configuration must specify either the +rmiport+ or +rmihost+ property so that it can start an RMI server.

Assuming a Persistit-based application is running on a host named “myhost” and has specified the configuration property +rmiport=1099+ in its configuration then the AdminUI can be launched as follows to connect with it:

----
java -cp <classpath> com.persistit.ui.AdminUI myhost:1099
----

where <classpath> includes the Persistit com.persistit.ui package. 

The JMX interface can be used by third-party management utilities, from applications such as +jconsole+ and +visualvm+, from JMX-aware system monitoring tools and from q command-line JMX client such as +jmxterm+. To enable JMX access, the configuration must specify the property +jmx=true+. This causes Persistit to register several MBeans with the platform MBean server during initialization.

== MBeans

The following MBeans are available:

[horizontal]
+com.persistit:type=Persistit+:: See com.persistit.ManagementMXBean
+com.persistit:type=Persistit,class=IOMeter+:: See com.persistit.IOMeterMXBean
+com.persistit:type=Persistit,class=CleanupManager+:: See com.persistit.CleanupManagerMXBean
+com.persistit:type=Persistit,class=TransactionIndex+:: See com.persistit.TransactionIndexMXBean
+com.persistit.type=Persistit,class=JournalManager+:: See com.persistit.JournalManagerMXBean
+com.persistit.type=Persistit,class=RecoveryManager+:: See com.persistit.RecoveryManager.MXBean
+com.persistit.type=Persistit,class=BufferPool._SSSS_+:: where _SSSS_ is a buffer size (512, 1024, 2048, 4096 or 16394) See com.persistit.BufferPoolMXBean

== Management Tasks

Both the AdminUI and the ManagementMXBean can launch and administer com.persistit.Task instances.  A Task is a management operation that may take a significant amount of time and usually runs in a separate thread.  For example, com.persistit.IntegrityCheck is a +Task+ that verifies the internal structural integrity of one or more trees. It can run for minutes to hours, depending on the size of the database.  Both AdminUI and ManagementMXBean provide mechanisms to launch, suspend or stop a task, and to monitor a task’s progress.

Currently the following built-in Tasks are available:

[horizontal]
+icheck+:: Check the integrity of one or more Trees. See com.persistit.IntegrityCheck
+save+:: Save selected key-value pairs from one or more Trees to a save file.  See com.persistit.StreamSaver.
+load+:: Load selected key-value pairs from a save file. See com.persistit.StreamLoader
+backup+:: Control and/or perform a concurrent backup of one more more Volumes.  See +com.persistit.BackupTask+.
+stat+:: Aggregate various performance statistics and either return them immediately, or write them periodically to a file.
+task+:: Check the status of an existing task.  This task can also suspend, resume or stop an existing task.  See com.persistit.TaskCheck. Note that this task, which immediately returns its status, can be used by external tools to poll the status of other tasks.
+cliserver+:: Start a simple command-line server on a specified port.  This enables a client program to execute commands sending them directly to that port.

All of these tasks can be launched by either the AdminUI program (see the +Tasks+ tab) or a JMX client using the com.persistit.ManagementMXBean#launch method.

== Executing a Task via the Command Line Interface

The com.persistit.ManagementMXBean#execute and com.persistit.ManagementMXBean#launch methods both take a single String-valued argument, parse it to set up a +Task+ and return a String-valued result. You can invoke these methods:

- programmatically, for example
[source,java]
----
String taskId = db.getManagement().launch(“backup -z file=/tmp/mybackup.zip”);
String status = db.getManagement().execute(“task -v -m -c taskId=” + taskId);
----

- via +jconsole+ by typing the desired command line as the argument of the +execute+ operation.
- via a third-party JMX client.
- via +cliserver+

=== Using a Third-Party JMX client.

You can use the +jmxterm+ program, for example, (see http://www.cyclopsgroup.org/projects/jmxterm/) to execute commands with the following shell script:

[source,bash]
----
#!/bin/sh
java -jar jmxterm-1.0-alpha-4-uber.jar --verbose silent --noninteract --url $1 <<EOF
run -d com.persistit -b com.persistit:type=Persistit execute $2
EOF
----

To use this script, specify either the JMX URL or the process ID as the first command argument, and the command line as the second argument.  Example

----
peter:~/workspace/sandbox$ jmxterm-execute 1234 ‘stat\ -a’
hit=3942334 miss=14 new=7364 evict=0 jwrite=81810 jread=2 jcopy=63848 tcommit=0 troll=0 CC=0 RV=12 RJ=2 WJ=81810 EV=0 FJ=529 IOkbytes=1134487 TOTAL
----

This command invokes the +stat+ task with the flag +-a+ on a JVM running with process id 1234.  Note that white-space must be quoted by backslash (‘\’) even though the argument list is also enclosed in single-quotes. The backslash marshals the space character through +jmxterm+’s parser. Commas and other delimiters also need to be quoted.


=== Using the Built-In +cliserver+

+cliserver+ is a simple single-threaded text-based server that receives a command line as a text string and emits the generated output as its response. To start it, enter the command
----
cliserver port=9999
----
programmatically or through JMX. (You may specify any valid, available port.) Then use a command-line client to send commands and display their results. For example, you can use +curl+ with the following script:

----
#!/bin/sh
echo "$*" | curl --silent --show-error telnet://localhost:9999
----
to issue commands.

Alternatively, you can use a client built into Persistit:

----
#!/bin/sh
java -cp classpath com.persistit.CLI localhost:9999 $*
----

Warning: +cliserver+ has no access control and sends potentially sensitive data in clear text. Therefore it should be used with care and only in a secure network environment. Its primary mission is to allow easy inspection of internal data structures within Persistit.

== Commands

The String value passed to the +execute+ operation specifies the name of a task and its arguments. The general form is

----
commandname -flag -flag argname=value argname=value
----

where the order of arguments and flags is immaterial.

=== Command: +icheck+

Performs a com.persistit.IntegrityCheck task. Arguments:

[horizontal]
+trees+:: specifies trees to check. See com.persistit.TreeSelector for details syntax. Default is all trees in all volumes.
+-r+:: Tree specification uses Java RegEx syntax
+-u+:: Don't freeze updates (Default is to freeze updates)
+-h+:: Fix index holes
+-p+:: Prune obsolete multi-version values (MVVs)
+-P+:: Prune obsolete multi-version values and delete all MVV history from the system. This operation may only be performed if all trees in all volumes are selected.
+-v+:: Verbose output - displays information about each tree
+-c+:: Write output in CSV (comma-separated variable) format which can be imported into spreadsheet programs for analysis

By default,IntegrityCheck suspends all threads attempting to modify the tree being checked and does not fix index holes or prune multi-version values.  (An _index hole_ is an anomaly that occurs rarely in normal operation such that a page does not have an index entry in the index page level immediately above it.)

Example:
----
icheck trees=vehicles -h
----
Checks all trees in the +vehicles+ volume and repairs any index holes it may find.

See com.persistit.TreeSelector for detailed volume and tree selection syntax.

=== Command: +save+

Starts a com.persistit.StreamSaver task to export key-value pairs to a save file. Arguments:

[horizontal]
+file+:: Name of file to save records to (required)
+trees+:: tree/volume/key specification selecting records to save

Example:
----
save file=/home/akiban/save.dat trees=vehicles:*{[“Edsel”:”Yugo”]}
----

Saves the records for “Edsel” through “Yugo”, inclusive, from every tree in the volume named +vehicles+. See com.persistit.TreeSelector for selection syntax details.

=== Command: +load+

Starts a com.persistit.StreamLoader task to import data from a save file. Arguments:

[horizontal]
+file+:: Name of file to load records from
+trees+:: volume/tree/key filter expression selecting records to load.
+-v+:: Don't create missing Volumes (Default is to create them)
+-t+:: Don't create missing Trees (Default is to create them)

Example:
----
load file=/home/akiban/save.dat trees=*:*{[“Falcon”:”Firebird”]}
----

For any tree in any volume, this command loads all records having keys between “Falcon” and “Firebird”, inclusive.

=== Command: +backup+

Starts a com.persistit.BackupTask task. The general backup strategy is to set Persistit to run in append-only mode, copy the database files, and then restore normal journaling. In append-only mode the data volume files remain unchanged, and all B-Tree modifications are written only to end of the journal. During this time the volume file and journal files may be copied. The +backup+ task provides a internal method for copying these files, but production sites are likely use external backup software. For use with external backup software, the +backup+ command provides flags that enable and/or disable append-only mode, request a checkpoint, perform journal copy-back, and list the files currently required for a full backup.

Note that Persistit does not provide an intrinsic incremental backup facility, but an external backup process that performs incremental backup can be used when copying the files.

Arguments:

[horizontal]
+file+:: Archive file path. If this argument is specified, BackupTask will archive the database in .zip format to the specified file. This facility is intended only for small databases. It is expected that +backup+ will be used in conjunction with high-speed third-party data copying utilities for production use.
+-a+:: Start appendOnly mode.  +backup -a+ should be invoked before data copying begins.
+-e+:: End appendOnly mode.  +backup -e+ should be invoked after data copying ends.
+-c+:: Request checkpoint before backup. This defines a known time after the invocation of the backup command at which recovered b-trees will be current.
+-z+:: Compress output to ZIP format - meaningful only in conjunction with the +file+ argument.
+-f+:: Emit a list of files that need to be copied.
+-y+:: Copy pages from journal to volumes before starting backup to reduce the number of journal files in the backup set.

Examples:

Perform backup using internal copy tool. The result is a ZIP-formatted file (compressed if the -z option is specified) containing the data volumes and journal files:
----
backup -a -e -z file=my_backup_file.zip
----

Perform backup using an external backup tool. The -f option creates list of files that need to be copied.
----
backup -y -c -a -f
… invoke third-party backup tool to copy the database files
backup -e
----

=== Command: +task+

Queries, stops, suspends or resumes a background task.  Arguments:

[horizontal]
+taskId+:: Task ID to to check, or -1 for all
+-v+:: Verbose - returns detailed status messages from the selected task(s)
+-m+:: Do not remove messages already delivered during a previous invocation of +task+
+-c+:: Do not remove completed tasks from the task set
+-x+:: Stop task(s)
+-u+:: Suspend the task(s)
+-r+:: Resume task(s)

Unlike other commands, the +task+ command always runs immediately even if invoked through the +launch+ method. 

You can use the +task+ command to poll and display progress of long-running tasks. Invoke

----
task -v taskId=123
----

While the task is running each invocation emits a one-line status indicator followed by any newly written messages from the running task. For example, the +icheck+ task posts one or more more messages for each tree it examines. Once the task finishes, the +task+ command returns a final status and then for any subsequent calls, an empty result. A polling process can check for an empty result to terminate.


=== Command: +exit+

Ends a running +cliserver+ instance.

== Commands for Viewing Data

The following commands execute immediately, even if invoked through the +launch+ method.  They provide a mechanism to examine individual database pages or journal records.

=== Command: +select+

Selects a volume and optionally a tree for subsequent operations such as +pview+. Arguments:

[horizontal]
+tree+:: volume and/or tree specification
+-r+:: use regular expressions. Without this flag, the wildcard characters ‘?’ and ‘*’ represent exactly one, or an indefinite number of characters.  When -r is specified, then the values specified for the volume and tree parameters are interpreted as Java regular expressions.

See com.persistit.TreeSelector for tree selection syntax. The result must match exactly one volume or one tree.

=== Command: +list+

Lists volumes and trees.  Arguments:

[horizontal]
+trees+:: tree specification, optionally with wildcards
+-r+:: use regular expressions. Without this flag, the wildcard characters ‘?’ and ‘*’ represent exactly one, or an indefinite number of characters.  When -r is specified, then the values specified for the volume and tree parameters are interpreted as Java regular expressions.

All volumes, and all trees within those volumes, that match the volume and/or tree specification are listed. By default, this command lists all trees in all volumes.

=== Command: +pview+

Displays contents of a database page. Arguments:

[horizontal]
+page+:: page address
+jaddr+:: journal address - displays a page version stored at the specified journal address
+key+:: a key specified as a String defined in the com.persistit.Key class
+level+:: tree level of the desired page
+find+:: selected records in an index page surrounding a key that points to the specified page address
+-a+:: all records. If specified, all records in the page will be displayed.  Otherwise the output is abbreviated to no more than 20 lines.
+-s+:: summary - only header information in the page is displayed

The +pview+ command identifies a page in one of three distinct ways: by page address, by journal address, or by key.  Only one of the three parameters +page+, +jaddr+ and +key+ (with +level+) may be used.

+page+ specifies the current version of a page having the specified address. If there is a copy of the page in the buffer pool, that copy is displayed even if it contains updates that are not yet written to disk. You must first use the +select+ command to select a volume from which the page will be gotten.

+jaddr+ specifies an address in the journal. Typical use is to invoke the +jview+ command to view a list of journal records, and then to see a detailed view of one page record in the journal, invoke the +pview+ command with its journal address.

+key+ specifies a key. By default the data page associated with that key will be displayed. The data page is defined as level 0. The +level+ parameter allows pages at various index levels to be viewed; for example +level=1+ refers to the index page that points to the data page containing the specified key. You must first use the +select+ command to select a tree in which the key will be looked up.

When examining an index page with potentially hundreds of records it is sometimes convenient to find the record that points to a particular child page in the context of records immediately before and after. Specifying the +find+ parameter when viewing an index page abbreviates the displayed records to include just the first and last records in the page, plus a small range of records surrounding the one that points to the specified page. This mechanism provides a convenient way to find sibling pages.


=== Command: +path+

For a specified key displays the sequence of pages from root of the tree to the data page containing they key. You must first use the +select+ command to select a tree. Argument:

[horizontal]
+key+:: a key specified as a String defined in the com.persistit.Key class


=== Command: +jview+

Displays journal records.  Arguments:

[horizontal]
+start+:: starting journal address (default = 0)
+end+:: end journal address (address = infinite)
+timestamps+:: range selection of timestamp values, e.g., “132466-132499” for records having timestamps between these two numbers, inclusive. Default is all timestamps.
+types+:: comma-delimted list of two-character record types, e.g., “JH,IV,IT,CP” to select only Journal Header, Identify Volume, Identify Tree and Check Point records (see com.persistit.JournalRecord for definitions of all types.) Default value is all types.
+pages+:: range selection of page address for PA (Page) records, e.g., “1,2,13-16” to include pages, 1, 2, 13, 14, 15 or 16.
+maxkey+:: maximum display length of key values in the output. Default value is 42.
+maxvalue+:: maximum display length of values in the output. Default value is 42.
+path+:: journal file path. Default is the journal file path of the currently instantiated Persistit instance.
+-v+:: verbose format. If specified, causes PM (Page Map) and TM (TransactionMap) records to display all map elements.


Note that the journal on a busy system contains a large number of records, so entering the +jview+ command without constraining the address range or record types may result in extremely lengthy output.

=== Command: +open+

Opens a Persistit database for analysis. If there already an open instance, this command detaches it. For example, if you start +cliserver+ from a live Persistit instance and then issue the +open+ command, +cliserver+ will no longer be attached to the live instance.

The +open+ command does not use a properties file to specify its data. Instead it finds a collection of journal files and volume files specified by the +datapath+, +journalpath+ and +volumepath+ arguments; from these it derives a set of properties that will allow it to examine those journals and volumes. All volumes are opened in read-only mode and cannot be changed by operations executed from the command-line interface.

Note that you cannot +open+ volumes that are already open in a running Persistit instance due to their file locks. However, you can copy open volumes and journal files to another location and +open+ the copy. This is the primary use case for the +open+ command: to analyze a copy of a database (for example a copy recovered from backup) without having to a launch the application software that embeds Persistit.

Arguments:

[horizontal]
+datapath+:: a directory path for volume and journal files to be analyzed
+volumepath+:: overrides +datapath+ to specify an alternative location for volume files.
+journalpath+:: overrides +datapath+ to specify an alternative location for journal files.
+rmiport+:: specifies an RMI port to which an instance of the AdminUI can attach.
+-g+:: launch a local copy of AdminUI
+-y+:: attempt to recover committed transactions .

Note that even if you specify +-y+ to recover transactions, the volume files will not be modified. But the +open+ command will add a new journal file containing modifications caused by the recovery process; you can simply delete that file when done.

=== Command: +close+

Detach and close the current Persistit instance. If the CLI was started with a live Persistit instance then this command merely detaches; if the instance was created with the +open+ command then +close+ closes it and releases all related file locks, buffers, etc.

=== Command: +source+

Take command lines from a specified text file. Argument:

[horizontal]
+file+:: file name of command input file

