/*
 * Copyright (c) 2004 Persistit Corporation. All Rights Reserved.
 *
 * The Java source code is the confidential and proprietary information
 * of Persistit Corporation ("Confidential Information"). You shall
 * not disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Persistit Corporation.
 *
 * PERSISTIT CORPORATION MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE
 * SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 * A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. PERSISTIT CORPORATION SHALL
 * NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 * 
 * Created on May 3, 2005
 */
package com.persistit.logging;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
/**
 * Wraps a Log4J <tt>org.apache.log4j.Logger</tt> for Persistit logging.
 * Code to enable default logging through Log4J is shown here:
 * <code><pre>
 *    // refer to any appropriate org.apache.log4j.Logger, for example
 *    Logger logger = Logger.getLogger("com.persistit"); //(for example)
 *    Persistit.setPersistitLogger(new Log4JAdapter(logger));
 * </pre></code>
 * @version 1.1
 */
public class Log4JAdapter extends AbstractPersistitLogger
{
    /**
     * Mapping from int log levels used inside Persistit to JDK14 Level
     * constants.
     */
    public final static Level[] LEVEL_ARRAY = new Level[]
    {
        Level.DEBUG,    //0
        Level.DEBUG,    //1
        Level.DEBUG,    //2
        Level.DEBUG,    //3
        Level.INFO,     //4
        Level.ERROR,    //5
        Level.FATAL,    //6
        Level.ALL,      //7
        Level.ALL,      //8
        Level.ALL,      //9
    };

    private Logger _logger;
    
    /**
     * Constructs a wrapped JDK 1.4 Logger. 
     * @param logger    A <tt>Logger</tt> to which Persistit log messages
     *                  will be directed.
     */
    public Log4JAdapter(Logger logger)
    {
        _logger = logger;
    }

    /**
     * Translates the level specified by a Persisit <tt>LogTemplate</tt>
     * to an <tt>org.apache.log4j.Level</tt>.
     * @param lt    The <tt>LogTemplate</tt>
     * @return      The <tt>Level</tt>
     */
    public Level getLevel(LogTemplate lt)
    {
        return LEVEL_ARRAY[lt.getLevel()];
    }
    
    /**
     * Overrides <tt>isLoggable</tt> it allow control by the 
     * wrapped <tt>Logger</tt>.
     * @param lt    The <tt>LogTemplate</tt>
     */
    public boolean isLoggable(LogTemplate lt)
    {
        return _logger.isEnabledFor(getLevel(lt));
    }

    /**
     * Writes a log message generated by Persistit to the wrapped
     * <tt>Logger</tt>.
     * @param lt        The <tt>LogTemplate</tt>
     * @param message   The message to write to the log.
     */
    public void log(LogTemplate lt, String message)
    {
        _logger.log(getLevel(lt), message);
    }

}
