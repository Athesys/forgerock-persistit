# Copyright (c) 2004 Persistit Corporation. All Rights Reserved.
#
# The Java source code is the confidential and proprietary information
# of Persistit Corporation ("Confidential Information"). You shall
# not disclose such Confidential Information and shall use it only in
# accordance with the terms of the license agreement you entered into
# with Persistit Corporation.
#
# PERSISTIT CORPORATION MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE
# SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
# A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. PERSISTIT CORPORATION SHALL
# NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
# MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
#
#-----
# This properties file provides localized message names for log items.
# The property name matches a definition in LogBase.java.  The associated
# template may may be modified to provide localized log messages.  The Persistit
# logging subsystem replaces template replacement markers {0}, {1}, etc. with
# values from underlying implementation.
#-----
#
START = {0} log started at {1}
END = log ended
LICENSE = License information: {0}
LICENSE_EXPIRED = License expired: {0}
EXCEPTION = {0}
INIT_ALLOCATE_BUFFERS = Allocating {0} buffers of size {1} bytes
INIT_OPEN_VOLUME = Opening volume {0}
INIT_RECOVER_BEGIN = Recovering from dirty shutdown 
INIT_RECOVER_PLAN = Recovery plan: {0}
INIT_RECOVER_END = Recovery completed
INIT_RECOVER_TERMINATE = Recovery log terminated at {0}
TXN_RECOVERY_START = Transaction recovery started
TXN_RECOVERY_FAILURE = Exception {0} during transaction recovery
TXN_RECOVERY_END = Transaction recovery completed: {0} commited, {1} rolled back
TXN_EXCEPTION = Exception {0} in transaction {1}
TXN_NOT_COMMITTED = Transaction neither committed nor rolled back {0}
RECOVERY_FAILURE1 = Volume {0} is not available and cannot be recovered
RECOVERY_FAILURE2 = Failed to recover page {0} because Volme {5} is unavailable
INIT_CREATE_GUI = Creating diagnostic GUI
DEFERRED_DEALLOC_FAILED = Timeout when performing deferred garbage chain deallocation
PENDING_TIMEOUT = Pending Timeout: operation has waited {0}ms - timeout will expire in {1}ms
SET_GARBAGE_HEADER = retry in setGarbageRoot: can't reserve head buffer {0}
DEALLOCGC1 = retry in deallocGarbageChain: can't reserve garbage page {0}
DEALLOCGC2 = added new garbage chain leftPage={0}, rightPage={1} {5}
DEALLOCGC3 = no room in garbage page for new garbage chain leftPage={0}, rightPage={1}, garbageBuffer={5}
DEALLOCGC4 = retry in deallocGarbageChain: can't reserve head buffer {0}
DEALLOCGC5 = retry in deallocGarbageChain: can't reserve garbage page {0}
DEALLOCGC6 = created new garbageRoot page {0}
DEALLOCGC7 = added new garbage chain leftPage={0}, rightPage={1} {5}
READ_UNSAFE = page {0} is not safe to read
READ_OK = page {0} was read into buffer # {1}
READ_IOE = page {0} read IOException into buffer # {1}: {5}
WRITE_IOE = page {0} write IOException: {5}
ALLOC_RETRY = retry in allocPage: can't reserve garbage page {0}
ALLOC_GARROOT = garbagePage {5} is exhausted and will be allocated: allocPage={0}, new garbageRoot is @<{1}>
ALLOC_GAR = allocated allocPage={0} from garbageChain {5}
ALLOC_GAR_END = removing garbage chain {5} because rightPage={0} == nextGarbagePage
ALLOC_GAR_UPDATE = updating garbage chain {5} new leftPage={0}, rightPage={1}
EXTEND_NORMAL = extending {5}: old length={0}, new length={1}
EXTEND_BADLENGTH= invalid length while extending {5}: old length={0}, new length={1}
EXTEND_IOE = IOException {6} while extending {5}: old length={0}, new length={1}
MBEAN_EXCEPTION = failure while registring JMX MBean: {0}
MBEAN_REGISTRATION = JMX MBean {0} is registered
UNINDEXED_PAGE = Unindexed page {0} in volume={5} tree={6} - run IntegrityCheck to repair
RMI_SERVER = Management RMI Server {0} {1}
SHUTDOWN_HOOK = Persistit closed by shutdown hook
WAIT_FOR_CLOSE = waited {0} seconds for IO operations to finish
STRANDED = {0} has {1} stranded pages
